** STRATASCRATCH**

1. Calculate the average score for each project, but only include projects where more than one team member has provided a score.
Your output should include the project ID and the calculated average score for each qualifying project.

# Import your libraries
import pandas as pd

# Start writing code
project_data.head()

grouped = project_data.groupby('project_id')

# Counting rows in each group
filtered_data = grouped.filter(lambda x: len(x)>1) 

# Reset index to get project_id as column rather than index
average_score = filtered_data.groupby('project_id')['score'].mean().reset_index()

# Change column name
average_score = average_score.rename(columns={'score':'average_score'})

2. For each week, find the total quantity across all orders of that week. Include only the orders that are from the first quarter of 2023.
The output should contain 'week' and 'quantity'.

import pandas as pd
sales_data.head()
sales_data.dtypes

# grouped = sales_data[(sales_data.sales_date.dt.month == 1) & (sales_data.sales_date.dt.year == 2024)].groupby('product_category')
# grouped.apply(lambda x:x.nlargest(3, 'total_sales', keep='all')).reset_index(drop=True)

## Alternative Using Function
def top_sales(df: pd.DataFrame) -> pd.DataFrame:
    return( df
            .query("(sales_date.dt.month == 1) & (sales_date.dt.year==2024)")
            .groupby('product_category', as_index=False)
            .apply(lambda x: x.nlargest(3, 'total_sales', keep='all'))
            .reset_index(drop=True)
            )
# Apply the function on sales_data
top_sales_data = top_sales(df=sales_data)

3. You are provided with an already aggregated dataset from Amazon that contains detailed information about sales across different products and marketplaces. Your task is to list the top 3 sellers in each 
product category for January. (In case of ties, rank them the same and include all sellers tied for that position.)

grouped = user_activity.groupby('device_type').apply(lambda x: x.nlargest(1, 'user_count', keep='all')).reset_index(drop=True)
grouped['time_period'] = grouped['start_timestamp'].astype(str)+' to '+grouped['end_timestamp'].astype(str)
result = grouped[['user_count', 'time_period','device_type']]

4. You are given a dataset from Amazon that tracks and aggregates user activity on their platform in certain time periods. For each device type, find the time period with the highest number of active users.

grouped = user_activity.groupby('device_type').apply(lambda x: x.nlargest(1, 'user_count', keep='all')).reset_index(drop=True)
grouped['time_period'] = grouped['start_timestamp'].astype(str)+' to '+grouped['end_timestamp'].astype(str)
result = grouped[['user_count', 'time_period','device_type']]

5. As a data scientist at Amazon Prime Video, you are tasked with enhancing the in-flight entertainment experience for Amazonâ€™s airline partners. Your challenge is to develop a feature that suggests individual movies 
from Amazon's content database that fit within a given flight's duration. For flight 101, find movies whose runtime is less than or equal to the flight's duration.
The output should list suggested movies for the flight, including 'flight_id', 'movie_id', and 'movie_duration'."

merged = pd.merge(left= flight_schedule, right= entertainment_catalog, how='cross')
merged = merged[(merged.flight_duration >= merged.duration) & (merged.flight_id == 101)]
merged[['flight_id', 'movie_id', 'duration']]

## Alternative Using Function
def movie_rec(c : pd.DataFrame, s: pd.DataFrame) -> pd.DataFrame:
    return (pd
            .merge(left=s , right=c, how='cross')
            .query("flight_id.eq(101) & flight_duration.ge(duration)")
            .filter(['flight_id', 'movie_id', 'duration'])
            )
            
movie_rec(c=entertainment_catalog, s=flight_schedule)

6. Write a query that returns the number of unique users per client per month

fact_events.groupby([fact_events.client_id, fact_events.time_id.dt.month])['user_id'].nunique().reset_index()

7. Write a query that will calculate the number of shipments per month. The unique key for one shipment is a combination of shipment_id and sub_id. 
Output the year_month in the format YYYY-MM and the number of shipments for that month.

8. A computer store offers a 25% discount to all new customers over the age of 65 or customers who spend more than $200 on their first purchase.
The owner wants to know how many customers received that discount since they started the promotion. Write a query to see how many customers received that discount.

result = customers[(customers.age > 65) | (customers.total_purchase > 200)]
result.customer_id.count()

9. 
